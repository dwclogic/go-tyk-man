package main

import (
	"fmt"
	"io/ioutil"
	"math/rand"
	"net/http"
	"os"
	"time"
	//	"encoding/json"
	"log"
)

func randomize() {
	rand.Seed(time.Now().UTC().UnixNano())
}

func index_handler(w http.ResponseWriter, r *http.Request) {
	//fmt.Fprintf(w, "Whoa, Go is Neat")
	fmt.Fprintf(w, `<h1>Hey there</h1><p>Go is Fast!</p><p>... and Simple!</p>`)
}

func about_handler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "This is my Http server app")
}

const DASH_HOST string = "https://persistent-sympathy-adm.aws-usw2.cloud-ara.tyk.io/"
const GET_APIS string = "api/apis"

func main() {
	fmt.Println("Welcome to go")
	//randomize()
	sn_creds := string(os.Args[1])

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -X GET -H "Authorization:{validUserCredentials}" \
	//   -H "Content-Type: application/json" \
	//   https://persistent-sympathy-adm.aws-usw2.cloud-ara.tyk.io/api/apis

	req, err := http.NewRequest("GET", DASH_HOST+GET_APIS, nil)
	if err != nil {
		// handle err
	}
	req.Header.Set("Authorization", sn_creds)
	req.Header.Set("Content-Type", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Println(err)
	}
	bytes, _ := ioutil.ReadAll(resp.Body)
	string_body := string(bytes)
	fmt.Println(string_body)
	defer resp.Body.Close()
}

func randomString(l int) string {
	bytes := make([]byte, l)
	for i := 0; i < l; i++ {
		bytes[i] = byte(randInt(65, 90))
	}
	return string(bytes)
}

func randInt(min int, max int) int {
	return min + rand.Intn(max-min)
}
